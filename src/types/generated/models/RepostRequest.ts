/* tslint:disable */
/* eslint-disable */
/**
 * Crosspost API
 * A secure proxy for social media APIs that allows authorized frontends to perform actions on behalf of users who have granted permission.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RepostRequest
 */
export interface RepostRequest {
    /**
     * The platform to repost on (e.g., "twitter")
     * @type {string}
     * @memberof RepostRequest
     */
    platform: RepostRequestPlatformEnum;
    /**
     * The user ID on the platform
     * @type {string}
     * @memberof RepostRequest
     */
    userId: string;
    /**
     * ID of the post to repost
     * @type {string}
     * @memberof RepostRequest
     */
    postId: string;
}


/**
 * @export
 */
export const RepostRequestPlatformEnum = {
    Twitter: 'twitter'
} as const;
export type RepostRequestPlatformEnum = typeof RepostRequestPlatformEnum[keyof typeof RepostRequestPlatformEnum];


/**
 * Check if a given object implements the RepostRequest interface.
 */
export function instanceOfRepostRequest(value: object): value is RepostRequest {
    if (!('platform' in value) || value['platform'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('postId' in value) || value['postId'] === undefined) return false;
    return true;
}

export function RepostRequestFromJSON(json: any): RepostRequest {
    return RepostRequestFromJSONTyped(json, false);
}

export function RepostRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RepostRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'platform': json['platform'],
        'userId': json['userId'],
        'postId': json['postId'],
    };
}

export function RepostRequestToJSON(json: any): RepostRequest {
    return RepostRequestToJSONTyped(json, false);
}

export function RepostRequestToJSONTyped(value?: RepostRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'platform': value['platform'],
        'userId': value['userId'],
        'postId': value['postId'],
    };
}

