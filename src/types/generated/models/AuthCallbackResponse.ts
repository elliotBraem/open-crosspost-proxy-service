/* tslint:disable */
/* eslint-disable */
/**
 * Crosspost API
 * A secure proxy for social media APIs that allows authorized frontends to perform actions on behalf of users who have granted permission.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuthCallbackResponseData } from './AuthCallbackResponseData';
import {
    AuthCallbackResponseDataFromJSON,
    AuthCallbackResponseDataFromJSONTyped,
    AuthCallbackResponseDataToJSON,
    AuthCallbackResponseDataToJSONTyped,
} from './AuthCallbackResponseData';
import type { ResponseMeta } from './ResponseMeta';
import {
    ResponseMetaFromJSON,
    ResponseMetaFromJSONTyped,
    ResponseMetaToJSON,
    ResponseMetaToJSONTyped,
} from './ResponseMeta';

/**
 * 
 * @export
 * @interface AuthCallbackResponse
 */
export interface AuthCallbackResponse {
    /**
     * 
     * @type {AuthCallbackResponseData}
     * @memberof AuthCallbackResponse
     */
    data: AuthCallbackResponseData;
    /**
     * 
     * @type {ResponseMeta}
     * @memberof AuthCallbackResponse
     */
    meta?: ResponseMeta;
}

/**
 * Check if a given object implements the AuthCallbackResponse interface.
 */
export function instanceOfAuthCallbackResponse(value: object): value is AuthCallbackResponse {
    if (!('data' in value) || value['data'] === undefined) return false;
    return true;
}

export function AuthCallbackResponseFromJSON(json: any): AuthCallbackResponse {
    return AuthCallbackResponseFromJSONTyped(json, false);
}

export function AuthCallbackResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthCallbackResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'data': AuthCallbackResponseDataFromJSON(json['data']),
        'meta': json['meta'] == null ? undefined : ResponseMetaFromJSON(json['meta']),
    };
}

export function AuthCallbackResponseToJSON(json: any): AuthCallbackResponse {
    return AuthCallbackResponseToJSONTyped(json, false);
}

export function AuthCallbackResponseToJSONTyped(value?: AuthCallbackResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'data': AuthCallbackResponseDataToJSON(value['data']),
        'meta': ResponseMetaToJSON(value['meta']),
    };
}

