/* tslint:disable */
/* eslint-disable */
/**
 * Crosspost API
 * A secure proxy for social media APIs that allows authorized frontends to perform actions on behalf of users who have granted permission.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MediaUploadResponseDataProcessingInfoError } from './MediaUploadResponseDataProcessingInfoError';
import {
    MediaUploadResponseDataProcessingInfoErrorFromJSON,
    MediaUploadResponseDataProcessingInfoErrorFromJSONTyped,
    MediaUploadResponseDataProcessingInfoErrorToJSON,
    MediaUploadResponseDataProcessingInfoErrorToJSONTyped,
} from './MediaUploadResponseDataProcessingInfoError';

/**
 * 
 * @export
 * @interface MediaUploadResponseDataProcessingInfo
 */
export interface MediaUploadResponseDataProcessingInfo {
    /**
     * Processing state
     * @type {string}
     * @memberof MediaUploadResponseDataProcessingInfo
     */
    state?: MediaUploadResponseDataProcessingInfoStateEnum;
    /**
     * Processing progress percentage
     * @type {number}
     * @memberof MediaUploadResponseDataProcessingInfo
     */
    progressPercent?: number;
    /**
     * 
     * @type {MediaUploadResponseDataProcessingInfoError}
     * @memberof MediaUploadResponseDataProcessingInfo
     */
    error?: MediaUploadResponseDataProcessingInfoError;
}


/**
 * @export
 */
export const MediaUploadResponseDataProcessingInfoStateEnum = {
    Pending: 'pending',
    InProgress: 'in_progress',
    Completed: 'completed',
    Failed: 'failed'
} as const;
export type MediaUploadResponseDataProcessingInfoStateEnum = typeof MediaUploadResponseDataProcessingInfoStateEnum[keyof typeof MediaUploadResponseDataProcessingInfoStateEnum];


/**
 * Check if a given object implements the MediaUploadResponseDataProcessingInfo interface.
 */
export function instanceOfMediaUploadResponseDataProcessingInfo(value: object): value is MediaUploadResponseDataProcessingInfo {
    return true;
}

export function MediaUploadResponseDataProcessingInfoFromJSON(json: any): MediaUploadResponseDataProcessingInfo {
    return MediaUploadResponseDataProcessingInfoFromJSONTyped(json, false);
}

export function MediaUploadResponseDataProcessingInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaUploadResponseDataProcessingInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'state': json['state'] == null ? undefined : json['state'],
        'progressPercent': json['progressPercent'] == null ? undefined : json['progressPercent'],
        'error': json['error'] == null ? undefined : MediaUploadResponseDataProcessingInfoErrorFromJSON(json['error']),
    };
}

export function MediaUploadResponseDataProcessingInfoToJSON(json: any): MediaUploadResponseDataProcessingInfo {
    return MediaUploadResponseDataProcessingInfoToJSONTyped(json, false);
}

export function MediaUploadResponseDataProcessingInfoToJSONTyped(value?: MediaUploadResponseDataProcessingInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'state': value['state'],
        'progressPercent': value['progressPercent'],
        'error': MediaUploadResponseDataProcessingInfoErrorToJSON(value['error']),
    };
}

