/* tslint:disable */
/* eslint-disable */
/**
 * Crosspost API
 * A secure proxy for social media APIs that allows authorized frontends to perform actions on behalf of users who have granted permission.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Media
 */
export interface Media {
    /**
     * Media ID
     * @type {string}
     * @memberof Media
     */
    id?: string;
    /**
     * Base64 encoded media data (for upload only)
     * @type {string}
     * @memberof Media
     */
    data?: string;
    /**
     * Media MIME type
     * @type {string}
     * @memberof Media
     */
    mimeType?: string;
    /**
     * Alternative text for accessibility
     * @type {string}
     * @memberof Media
     */
    altText?: string;
}

/**
 * Check if a given object implements the Media interface.
 */
export function instanceOfMedia(value: object): value is Media {
    return true;
}

export function MediaFromJSON(json: any): Media {
    return MediaFromJSONTyped(json, false);
}

export function MediaFromJSONTyped(json: any, ignoreDiscriminator: boolean): Media {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'data': json['data'] == null ? undefined : json['data'],
        'mimeType': json['mimeType'] == null ? undefined : json['mimeType'],
        'altText': json['altText'] == null ? undefined : json['altText'],
    };
}

export function MediaToJSON(json: any): Media {
    return MediaToJSONTyped(json, false);
}

export function MediaToJSONTyped(value?: Media | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'data': value['data'],
        'mimeType': value['mimeType'],
        'altText': value['altText'],
    };
}

