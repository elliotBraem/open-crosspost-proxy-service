/* tslint:disable */
/* eslint-disable */
/**
 * Crosspost API
 * A secure proxy for social media APIs that allows authorized frontends to perform actions on behalf of users who have granted permission.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PostMetrics } from './PostMetrics';
import {
    PostMetricsFromJSON,
    PostMetricsFromJSONTyped,
    PostMetricsToJSON,
    PostMetricsToJSONTyped,
} from './PostMetrics';
import type { Media } from './Media';
import {
    MediaFromJSON,
    MediaFromJSONTyped,
    MediaToJSON,
    MediaToJSONTyped,
} from './Media';

/**
 * 
 * @export
 * @interface Post
 */
export interface Post {
    /**
     * Post ID
     * @type {string}
     * @memberof Post
     */
    id?: string;
    /**
     * Post text content
     * @type {string}
     * @memberof Post
     */
    text?: string;
    /**
     * Post creation timestamp
     * @type {Date}
     * @memberof Post
     */
    createdAt?: Date;
    /**
     * ID of the post author
     * @type {string}
     * @memberof Post
     */
    authorId?: string;
    /**
     * Media attachments
     * @type {Array<Media>}
     * @memberof Post
     */
    media?: Array<Media>;
    /**
     * 
     * @type {PostMetrics}
     * @memberof Post
     */
    metrics?: PostMetrics;
    /**
     * ID of the post this is a reply to (if applicable)
     * @type {string}
     * @memberof Post
     */
    inReplyToId?: string;
    /**
     * ID of the post this is quoting (if applicable)
     * @type {string}
     * @memberof Post
     */
    quotedPostId?: string;
}

/**
 * Check if a given object implements the Post interface.
 */
export function instanceOfPost(value: object): value is Post {
    return true;
}

export function PostFromJSON(json: any): Post {
    return PostFromJSONTyped(json, false);
}

export function PostFromJSONTyped(json: any, ignoreDiscriminator: boolean): Post {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'text': json['text'] == null ? undefined : json['text'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'authorId': json['authorId'] == null ? undefined : json['authorId'],
        'media': json['media'] == null ? undefined : ((json['media'] as Array<any>).map(MediaFromJSON)),
        'metrics': json['metrics'] == null ? undefined : PostMetricsFromJSON(json['metrics']),
        'inReplyToId': json['inReplyToId'] == null ? undefined : json['inReplyToId'],
        'quotedPostId': json['quotedPostId'] == null ? undefined : json['quotedPostId'],
    };
}

export function PostToJSON(json: any): Post {
    return PostToJSONTyped(json, false);
}

export function PostToJSONTyped(value?: Post | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'text': value['text'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'authorId': value['authorId'],
        'media': value['media'] == null ? undefined : ((value['media'] as Array<any>).map(MediaToJSON)),
        'metrics': PostMetricsToJSON(value['metrics']),
        'inReplyToId': value['inReplyToId'],
        'quotedPostId': value['quotedPostId'],
    };
}

