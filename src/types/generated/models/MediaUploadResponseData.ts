/* tslint:disable */
/* eslint-disable */
/**
 * Crosspost API
 * A secure proxy for social media APIs that allows authorized frontends to perform actions on behalf of users who have granted permission.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MediaUploadResponseDataProcessingInfo } from './MediaUploadResponseDataProcessingInfo';
import {
    MediaUploadResponseDataProcessingInfoFromJSON,
    MediaUploadResponseDataProcessingInfoFromJSONTyped,
    MediaUploadResponseDataProcessingInfoToJSON,
    MediaUploadResponseDataProcessingInfoToJSONTyped,
} from './MediaUploadResponseDataProcessingInfo';

/**
 * 
 * @export
 * @interface MediaUploadResponseData
 */
export interface MediaUploadResponseData {
    /**
     * Media ID
     * @type {string}
     * @memberof MediaUploadResponseData
     */
    mediaId: string;
    /**
     * Media upload status
     * @type {string}
     * @memberof MediaUploadResponseData
     */
    status: MediaUploadResponseDataStatusEnum;
    /**
     * Timestamp when the media expires (in seconds since epoch)
     * @type {number}
     * @memberof MediaUploadResponseData
     */
    expiresAfter?: number;
    /**
     * 
     * @type {MediaUploadResponseDataProcessingInfo}
     * @memberof MediaUploadResponseData
     */
    processingInfo?: MediaUploadResponseDataProcessingInfo;
}


/**
 * @export
 */
export const MediaUploadResponseDataStatusEnum = {
    Pending: 'pending',
    InProgress: 'in_progress',
    Succeeded: 'succeeded',
    Failed: 'failed'
} as const;
export type MediaUploadResponseDataStatusEnum = typeof MediaUploadResponseDataStatusEnum[keyof typeof MediaUploadResponseDataStatusEnum];


/**
 * Check if a given object implements the MediaUploadResponseData interface.
 */
export function instanceOfMediaUploadResponseData(value: object): value is MediaUploadResponseData {
    if (!('mediaId' in value) || value['mediaId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function MediaUploadResponseDataFromJSON(json: any): MediaUploadResponseData {
    return MediaUploadResponseDataFromJSONTyped(json, false);
}

export function MediaUploadResponseDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaUploadResponseData {
    if (json == null) {
        return json;
    }
    return {
        
        'mediaId': json['mediaId'],
        'status': json['status'],
        'expiresAfter': json['expiresAfter'] == null ? undefined : json['expiresAfter'],
        'processingInfo': json['processingInfo'] == null ? undefined : MediaUploadResponseDataProcessingInfoFromJSON(json['processingInfo']),
    };
}

export function MediaUploadResponseDataToJSON(json: any): MediaUploadResponseData {
    return MediaUploadResponseDataToJSONTyped(json, false);
}

export function MediaUploadResponseDataToJSONTyped(value?: MediaUploadResponseData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'mediaId': value['mediaId'],
        'status': value['status'],
        'expiresAfter': value['expiresAfter'],
        'processingInfo': MediaUploadResponseDataProcessingInfoToJSON(value['processingInfo']),
    };
}

