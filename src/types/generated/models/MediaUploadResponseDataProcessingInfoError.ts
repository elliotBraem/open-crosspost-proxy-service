/* tslint:disable */
/* eslint-disable */
/**
 * Crosspost API
 * A secure proxy for social media APIs that allows authorized frontends to perform actions on behalf of users who have granted permission.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MediaUploadResponseDataProcessingInfoError
 */
export interface MediaUploadResponseDataProcessingInfoError {
    /**
     * Error code
     * @type {string}
     * @memberof MediaUploadResponseDataProcessingInfoError
     */
    code?: string;
    /**
     * Error message
     * @type {string}
     * @memberof MediaUploadResponseDataProcessingInfoError
     */
    message?: string;
}

/**
 * Check if a given object implements the MediaUploadResponseDataProcessingInfoError interface.
 */
export function instanceOfMediaUploadResponseDataProcessingInfoError(value: object): value is MediaUploadResponseDataProcessingInfoError {
    return true;
}

export function MediaUploadResponseDataProcessingInfoErrorFromJSON(json: any): MediaUploadResponseDataProcessingInfoError {
    return MediaUploadResponseDataProcessingInfoErrorFromJSONTyped(json, false);
}

export function MediaUploadResponseDataProcessingInfoErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaUploadResponseDataProcessingInfoError {
    if (json == null) {
        return json;
    }
    return {
        
        'code': json['code'] == null ? undefined : json['code'],
        'message': json['message'] == null ? undefined : json['message'],
    };
}

export function MediaUploadResponseDataProcessingInfoErrorToJSON(json: any): MediaUploadResponseDataProcessingInfoError {
    return MediaUploadResponseDataProcessingInfoErrorToJSONTyped(json, false);
}

export function MediaUploadResponseDataProcessingInfoErrorToJSONTyped(value?: MediaUploadResponseDataProcessingInfoError | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'code': value['code'],
        'message': value['message'],
    };
}

