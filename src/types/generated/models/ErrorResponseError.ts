/* tslint:disable */
/* eslint-disable */
/**
 * Crosspost API
 * A secure proxy for social media APIs that allows authorized frontends to perform actions on behalf of users who have granted permission.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ErrorResponseError
 */
export interface ErrorResponseError {
    /**
     * Error type
     * @type {string}
     * @memberof ErrorResponseError
     */
    type: ErrorResponseErrorTypeEnum;
    /**
     * Error message
     * @type {string}
     * @memberof ErrorResponseError
     */
    message: string;
    /**
     * Error code (if applicable)
     * @type {string}
     * @memberof ErrorResponseError
     */
    code?: string;
    /**
     * Additional error details
     * @type {{ [key: string]: any; }}
     * @memberof ErrorResponseError
     */
    details?: { [key: string]: any; };
}


/**
 * @export
 */
export const ErrorResponseErrorTypeEnum = {
    Authentication: 'AUTHENTICATION',
    Authorization: 'AUTHORIZATION',
    Validation: 'VALIDATION',
    RateLimit: 'RATE_LIMIT',
    TwitterApi: 'TWITTER_API',
    TwitterRequest: 'TWITTER_REQUEST',
    TwitterPartialResponse: 'TWITTER_PARTIAL_RESPONSE',
    Internal: 'INTERNAL'
} as const;
export type ErrorResponseErrorTypeEnum = typeof ErrorResponseErrorTypeEnum[keyof typeof ErrorResponseErrorTypeEnum];


/**
 * Check if a given object implements the ErrorResponseError interface.
 */
export function instanceOfErrorResponseError(value: object): value is ErrorResponseError {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    return true;
}

export function ErrorResponseErrorFromJSON(json: any): ErrorResponseError {
    return ErrorResponseErrorFromJSONTyped(json, false);
}

export function ErrorResponseErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorResponseError {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'message': json['message'],
        'code': json['code'] == null ? undefined : json['code'],
        'details': json['details'] == null ? undefined : json['details'],
    };
}

export function ErrorResponseErrorToJSON(json: any): ErrorResponseError {
    return ErrorResponseErrorToJSONTyped(json, false);
}

export function ErrorResponseErrorToJSONTyped(value?: ErrorResponseError | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'message': value['message'],
        'code': value['code'],
        'details': value['details'],
    };
}

