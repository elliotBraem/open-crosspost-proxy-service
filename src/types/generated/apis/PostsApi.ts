/* tslint:disable */
/* eslint-disable */
/**
 * Crosspost API
 * A secure proxy for social media APIs that allows authorized frontends to perform actions on behalf of users who have granted permission.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePostRequest,
  DeletePostResponse,
  ErrorResponse,
  LikePostResponse,
  PostResponse,
  QuotePostRequest,
  QuotePostResponse,
  ReplyToPostRequest,
  ReplyToPostResponse,
  RepostRequest,
  RepostResponse,
  UnlikePostResponse,
} from '../models/index';
import {
    CreatePostRequestFromJSON,
    CreatePostRequestToJSON,
    DeletePostResponseFromJSON,
    DeletePostResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    LikePostResponseFromJSON,
    LikePostResponseToJSON,
    PostResponseFromJSON,
    PostResponseToJSON,
    QuotePostRequestFromJSON,
    QuotePostRequestToJSON,
    QuotePostResponseFromJSON,
    QuotePostResponseToJSON,
    ReplyToPostRequestFromJSON,
    ReplyToPostRequestToJSON,
    ReplyToPostResponseFromJSON,
    ReplyToPostResponseToJSON,
    RepostRequestFromJSON,
    RepostRequestToJSON,
    RepostResponseFromJSON,
    RepostResponseToJSON,
    UnlikePostResponseFromJSON,
    UnlikePostResponseToJSON,
} from '../models/index';

export interface CreatePostOperationRequest {
    createPostRequest: CreatePostRequest;
}

export interface DeletePostRequest {
    id: string;
}

export interface LikePostRequest {
    id: string;
}

export interface QuotePostOperationRequest {
    quotePostRequest: QuotePostRequest;
}

export interface ReplyToPostOperationRequest {
    replyToPostRequest: ReplyToPostRequest;
}

export interface RepostOperationRequest {
    repostRequest: RepostRequest;
}

export interface UnlikePostRequest {
    id: string;
}

/**
 * 
 */
export class PostsApi extends runtime.BaseAPI {

    /**
     * Create a new post (tweet)
     * Create a post
     */
    async createPostRaw(requestParameters: CreatePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostResponse>> {
        if (requestParameters['createPostRequest'] == null) {
            throw new runtime.RequiredError(
                'createPostRequest',
                'Required parameter "createPostRequest" was null or undefined when calling createPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/post`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePostRequestToJSON(requestParameters['createPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostResponseFromJSON(jsonValue));
    }

    /**
     * Create a new post (tweet)
     * Create a post
     */
    async createPost(requestParameters: CreatePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostResponse> {
        const response = await this.createPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing post
     * Delete a post
     */
    async deletePostRaw(requestParameters: DeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePostResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/post/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePostResponseFromJSON(jsonValue));
    }

    /**
     * Delete an existing post
     * Delete a post
     */
    async deletePost(requestParameters: DeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePostResponse> {
        const response = await this.deletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Like an existing post
     * Like a post
     */
    async likePostRaw(requestParameters: LikePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LikePostResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling likePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/post/like/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LikePostResponseFromJSON(jsonValue));
    }

    /**
     * Like an existing post
     * Like a post
     */
    async likePost(requestParameters: LikePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LikePostResponse> {
        const response = await this.likePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Quote an existing post
     * Quote post
     */
    async quotePostRaw(requestParameters: QuotePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuotePostResponse>> {
        if (requestParameters['quotePostRequest'] == null) {
            throw new runtime.RequiredError(
                'quotePostRequest',
                'Required parameter "quotePostRequest" was null or undefined when calling quotePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/post/quote`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuotePostRequestToJSON(requestParameters['quotePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuotePostResponseFromJSON(jsonValue));
    }

    /**
     * Quote an existing post
     * Quote post
     */
    async quotePost(requestParameters: QuotePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuotePostResponse> {
        const response = await this.quotePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reply to an existing post
     * Reply to post
     */
    async replyToPostRaw(requestParameters: ReplyToPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReplyToPostResponse>> {
        if (requestParameters['replyToPostRequest'] == null) {
            throw new runtime.RequiredError(
                'replyToPostRequest',
                'Required parameter "replyToPostRequest" was null or undefined when calling replyToPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/post/reply`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReplyToPostRequestToJSON(requestParameters['replyToPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReplyToPostResponseFromJSON(jsonValue));
    }

    /**
     * Reply to an existing post
     * Reply to post
     */
    async replyToPost(requestParameters: ReplyToPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReplyToPostResponse> {
        const response = await this.replyToPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Repost/retweet an existing post
     * Repost
     */
    async repostRaw(requestParameters: RepostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RepostResponse>> {
        if (requestParameters['repostRequest'] == null) {
            throw new runtime.RequiredError(
                'repostRequest',
                'Required parameter "repostRequest" was null or undefined when calling repost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/post/repost`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RepostRequestToJSON(requestParameters['repostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RepostResponseFromJSON(jsonValue));
    }

    /**
     * Repost/retweet an existing post
     * Repost
     */
    async repost(requestParameters: RepostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RepostResponse> {
        const response = await this.repostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unlike a previously liked post
     * Unlike a post
     */
    async unlikePostRaw(requestParameters: UnlikePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnlikePostResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling unlikePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/post/like/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnlikePostResponseFromJSON(jsonValue));
    }

    /**
     * Unlike a previously liked post
     * Unlike a post
     */
    async unlikePost(requestParameters: UnlikePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnlikePostResponse> {
        const response = await this.unlikePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
