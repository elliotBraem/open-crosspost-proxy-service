/* tslint:disable */
/* eslint-disable */
/**
 * Crosspost API
 * A secure proxy for social media APIs that allows authorized frontends to perform actions on behalf of users who have granted permission.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllRateLimitsResponse,
  ErrorResponse,
  RateLimitCheckRequest,
  RateLimitCheckResponse,
  RateLimitObsoleteRequest,
  RateLimitObsoleteResponse,
  RateLimitStatusResponse,
} from '../models/index';
import {
    AllRateLimitsResponseFromJSON,
    AllRateLimitsResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    RateLimitCheckRequestFromJSON,
    RateLimitCheckRequestToJSON,
    RateLimitCheckResponseFromJSON,
    RateLimitCheckResponseToJSON,
    RateLimitObsoleteRequestFromJSON,
    RateLimitObsoleteRequestToJSON,
    RateLimitObsoleteResponseFromJSON,
    RateLimitObsoleteResponseToJSON,
    RateLimitStatusResponseFromJSON,
    RateLimitStatusResponseToJSON,
} from '../models/index';

export interface GetAllRateLimitsRequest {
    platform: GetAllRateLimitsPlatformEnum;
}

export interface GetRateLimitStatusRequest {
    platform: GetRateLimitStatusPlatformEnum;
    endpoint: string;
    version?: GetRateLimitStatusVersionEnum;
}

export interface IsRateLimitObsoleteRequest {
    platform: IsRateLimitObsoletePlatformEnum;
    rateLimitObsoleteRequest: RateLimitObsoleteRequest;
}

export interface IsRateLimitedRequest {
    platform: IsRateLimitedPlatformEnum;
    rateLimitCheckRequest: RateLimitCheckRequest;
}

/**
 * 
 */
export class RateLimitsApi extends runtime.BaseAPI {

    /**
     * Get rate limit status for all endpoints for a specific platform
     * Get all rate limits
     */
    async getAllRateLimitsRaw(requestParameters: GetAllRateLimitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllRateLimitsResponse>> {
        if (requestParameters['platform'] == null) {
            throw new runtime.RequiredError(
                'platform',
                'Required parameter "platform" was null or undefined when calling getAllRateLimits().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/rate-limit/{platform}`.replace(`{${"platform"}}`, encodeURIComponent(String(requestParameters['platform']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllRateLimitsResponseFromJSON(jsonValue));
    }

    /**
     * Get rate limit status for all endpoints for a specific platform
     * Get all rate limits
     */
    async getAllRateLimits(requestParameters: GetAllRateLimitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllRateLimitsResponse> {
        const response = await this.getAllRateLimitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get rate limit status for a specific endpoint on a specific platform
     * Get rate limit status
     */
    async getRateLimitStatusRaw(requestParameters: GetRateLimitStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateLimitStatusResponse>> {
        if (requestParameters['platform'] == null) {
            throw new runtime.RequiredError(
                'platform',
                'Required parameter "platform" was null or undefined when calling getRateLimitStatus().'
            );
        }

        if (requestParameters['endpoint'] == null) {
            throw new runtime.RequiredError(
                'endpoint',
                'Required parameter "endpoint" was null or undefined when calling getRateLimitStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/rate-limit/{platform}/{endpoint}`.replace(`{${"platform"}}`, encodeURIComponent(String(requestParameters['platform']))).replace(`{${"endpoint"}}`, encodeURIComponent(String(requestParameters['endpoint']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateLimitStatusResponseFromJSON(jsonValue));
    }

    /**
     * Get rate limit status for a specific endpoint on a specific platform
     * Get rate limit status
     */
    async getRateLimitStatus(requestParameters: GetRateLimitStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateLimitStatusResponse> {
        const response = await this.getRateLimitStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if a rate limit status is obsolete (reset time has passed) for a specific platform
     * Check if rate limit is obsolete
     */
    async isRateLimitObsoleteRaw(requestParameters: IsRateLimitObsoleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateLimitObsoleteResponse>> {
        if (requestParameters['platform'] == null) {
            throw new runtime.RequiredError(
                'platform',
                'Required parameter "platform" was null or undefined when calling isRateLimitObsolete().'
            );
        }

        if (requestParameters['rateLimitObsoleteRequest'] == null) {
            throw new runtime.RequiredError(
                'rateLimitObsoleteRequest',
                'Required parameter "rateLimitObsoleteRequest" was null or undefined when calling isRateLimitObsolete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/rate-limit/{platform}/obsolete`.replace(`{${"platform"}}`, encodeURIComponent(String(requestParameters['platform']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RateLimitObsoleteRequestToJSON(requestParameters['rateLimitObsoleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateLimitObsoleteResponseFromJSON(jsonValue));
    }

    /**
     * Check if a rate limit status is obsolete (reset time has passed) for a specific platform
     * Check if rate limit is obsolete
     */
    async isRateLimitObsolete(requestParameters: IsRateLimitObsoleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateLimitObsoleteResponse> {
        const response = await this.isRateLimitObsoleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if a rate limit has been hit for a specific platform
     * Check if rate limited
     */
    async isRateLimitedRaw(requestParameters: IsRateLimitedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateLimitCheckResponse>> {
        if (requestParameters['platform'] == null) {
            throw new runtime.RequiredError(
                'platform',
                'Required parameter "platform" was null or undefined when calling isRateLimited().'
            );
        }

        if (requestParameters['rateLimitCheckRequest'] == null) {
            throw new runtime.RequiredError(
                'rateLimitCheckRequest',
                'Required parameter "rateLimitCheckRequest" was null or undefined when calling isRateLimited().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/rate-limit/{platform}/check`.replace(`{${"platform"}}`, encodeURIComponent(String(requestParameters['platform']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RateLimitCheckRequestToJSON(requestParameters['rateLimitCheckRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateLimitCheckResponseFromJSON(jsonValue));
    }

    /**
     * Check if a rate limit has been hit for a specific platform
     * Check if rate limited
     */
    async isRateLimited(requestParameters: IsRateLimitedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateLimitCheckResponse> {
        const response = await this.isRateLimitedRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAllRateLimitsPlatformEnum = {
    Twitter: 'twitter'
} as const;
export type GetAllRateLimitsPlatformEnum = typeof GetAllRateLimitsPlatformEnum[keyof typeof GetAllRateLimitsPlatformEnum];
/**
 * @export
 */
export const GetRateLimitStatusPlatformEnum = {
    Twitter: 'twitter'
} as const;
export type GetRateLimitStatusPlatformEnum = typeof GetRateLimitStatusPlatformEnum[keyof typeof GetRateLimitStatusPlatformEnum];
/**
 * @export
 */
export const GetRateLimitStatusVersionEnum = {
    V1: 'v1',
    V2: 'v2'
} as const;
export type GetRateLimitStatusVersionEnum = typeof GetRateLimitStatusVersionEnum[keyof typeof GetRateLimitStatusVersionEnum];
/**
 * @export
 */
export const IsRateLimitObsoletePlatformEnum = {
    Twitter: 'twitter'
} as const;
export type IsRateLimitObsoletePlatformEnum = typeof IsRateLimitObsoletePlatformEnum[keyof typeof IsRateLimitObsoletePlatformEnum];
/**
 * @export
 */
export const IsRateLimitedPlatformEnum = {
    Twitter: 'twitter'
} as const;
export type IsRateLimitedPlatformEnum = typeof IsRateLimitedPlatformEnum[keyof typeof IsRateLimitedPlatformEnum];
