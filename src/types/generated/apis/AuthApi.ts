/* tslint:disable */
/* eslint-disable */
/**
 * Crosspost API
 * A secure proxy for social media APIs that allows authorized frontends to perform actions on behalf of users who have granted permission.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthCallbackResponse,
  AuthorizeNearResponse,
  CheckNearAuthorizationStatus200Response,
  ErrorResponse,
  InitializeAuthRequest,
  InitializeAuthResponse,
  ListConnectedAccounts200Response,
  RefreshProfileResponse,
  RefreshTokenResponse,
  RefreshUserProfileRequest,
  RevokeTokenResponse,
  UnauthorizeNearResponse,
  ValidateTokensResponse,
} from '../models/index';
import {
    AuthCallbackResponseFromJSON,
    AuthCallbackResponseToJSON,
    AuthorizeNearResponseFromJSON,
    AuthorizeNearResponseToJSON,
    CheckNearAuthorizationStatus200ResponseFromJSON,
    CheckNearAuthorizationStatus200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    InitializeAuthRequestFromJSON,
    InitializeAuthRequestToJSON,
    InitializeAuthResponseFromJSON,
    InitializeAuthResponseToJSON,
    ListConnectedAccounts200ResponseFromJSON,
    ListConnectedAccounts200ResponseToJSON,
    RefreshProfileResponseFromJSON,
    RefreshProfileResponseToJSON,
    RefreshTokenResponseFromJSON,
    RefreshTokenResponseToJSON,
    RefreshUserProfileRequestFromJSON,
    RefreshUserProfileRequestToJSON,
    RevokeTokenResponseFromJSON,
    RevokeTokenResponseToJSON,
    UnauthorizeNearResponseFromJSON,
    UnauthorizeNearResponseToJSON,
    ValidateTokensResponseFromJSON,
    ValidateTokensResponseToJSON,
} from '../models/index';

export interface HandleCallbackRequest {
    platform: HandleCallbackPlatformEnum;
    code: string;
    state: string;
}

export interface HasValidTokensRequest {
    platform: HasValidTokensPlatformEnum;
    userId: string;
}

export interface InitializeAuthOperationRequest {
    platform: InitializeAuthPlatformEnum;
    initializeAuthRequest: InitializeAuthRequest;
}

export interface RefreshTokenRequest {
    platform: RefreshTokenPlatformEnum;
}

export interface RefreshUserProfileOperationRequest {
    platform: RefreshUserProfilePlatformEnum;
    refreshUserProfileRequest: RefreshUserProfileRequest;
}

export interface RevokeTokenRequest {
    platform: RevokeTokenPlatformEnum;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Authorizes a NEAR account to interact with the proxy by verifying its signature provided in the Authorization header. This must be done before attempting to link any platform accounts.
     * Authorize NEAR Account
     */
    async authorizeNearRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizeNearResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/auth/authorize/near`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizeNearResponseFromJSON(jsonValue));
    }

    /**
     * Authorizes a NEAR account to interact with the proxy by verifying its signature provided in the Authorization header. This must be done before attempting to link any platform accounts.
     * Authorize NEAR Account
     */
    async authorizeNear(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizeNearResponse> {
        const response = await this.authorizeNearRaw(initOverrides);
        return await response.value();
    }

    /**
     * Checks if the NEAR account (identified by the signature in the Authorization header) is authorized to interact with the proxy.
     * Check NEAR Account Authorization Status
     */
    async checkNearAuthorizationStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckNearAuthorizationStatus200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/auth/authorize/near/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckNearAuthorizationStatus200ResponseFromJSON(jsonValue));
    }

    /**
     * Checks if the NEAR account (identified by the signature in the Authorization header) is authorized to interact with the proxy.
     * Check NEAR Account Authorization Status
     */
    async checkNearAuthorizationStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckNearAuthorizationStatus200Response> {
        const response = await this.checkNearAuthorizationStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Process the OAuth callback and exchange the code for tokens for a specific platform
     * Handle OAuth callback
     */
    async handleCallbackRaw(requestParameters: HandleCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthCallbackResponse>> {
        if (requestParameters['platform'] == null) {
            throw new runtime.RequiredError(
                'platform',
                'Required parameter "platform" was null or undefined when calling handleCallback().'
            );
        }

        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling handleCallback().'
            );
        }

        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling handleCallback().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/auth/{platform}/callback`.replace(`{${"platform"}}`, encodeURIComponent(String(requestParameters['platform']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthCallbackResponseFromJSON(jsonValue));
    }

    /**
     * Process the OAuth callback and exchange the code for tokens for a specific platform
     * Handle OAuth callback
     */
    async handleCallback(requestParameters: HandleCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthCallbackResponse> {
        const response = await this.handleCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if a user has valid tokens for a specific platform
     * Check token status
     */
    async hasValidTokensRaw(requestParameters: HasValidTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidateTokensResponse>> {
        if (requestParameters['platform'] == null) {
            throw new runtime.RequiredError(
                'platform',
                'Required parameter "platform" was null or undefined when calling hasValidTokens().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling hasValidTokens().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/auth/{platform}/status`.replace(`{${"platform"}}`, encodeURIComponent(String(requestParameters['platform']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidateTokensResponseFromJSON(jsonValue));
    }

    /**
     * Check if a user has valid tokens for a specific platform
     * Check token status
     */
    async hasValidTokens(requestParameters: HasValidTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidateTokensResponse> {
        const response = await this.hasValidTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start the OAuth flow by generating an authentication URL for a specific platform
     * Initialize authentication
     */
    async initializeAuthRaw(requestParameters: InitializeAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InitializeAuthResponse>> {
        if (requestParameters['platform'] == null) {
            throw new runtime.RequiredError(
                'platform',
                'Required parameter "platform" was null or undefined when calling initializeAuth().'
            );
        }

        if (requestParameters['initializeAuthRequest'] == null) {
            throw new runtime.RequiredError(
                'initializeAuthRequest',
                'Required parameter "initializeAuthRequest" was null or undefined when calling initializeAuth().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/auth/{platform}/login`.replace(`{${"platform"}}`, encodeURIComponent(String(requestParameters['platform']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InitializeAuthRequestToJSON(requestParameters['initializeAuthRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InitializeAuthResponseFromJSON(jsonValue));
    }

    /**
     * Start the OAuth flow by generating an authentication URL for a specific platform
     * Initialize authentication
     */
    async initializeAuth(requestParameters: InitializeAuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InitializeAuthResponse> {
        const response = await this.initializeAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all social media accounts connected to a NEAR wallet
     * List connected accounts
     */
    async listConnectedAccountsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListConnectedAccounts200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/auth/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListConnectedAccounts200ResponseFromJSON(jsonValue));
    }

    /**
     * List all social media accounts connected to a NEAR wallet
     * List connected accounts
     */
    async listConnectedAccounts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListConnectedAccounts200Response> {
        const response = await this.listConnectedAccountsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Refresh an access token for a specific platform
     * Refresh token
     */
    async refreshTokenRaw(requestParameters: RefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefreshTokenResponse>> {
        if (requestParameters['platform'] == null) {
            throw new runtime.RequiredError(
                'platform',
                'Required parameter "platform" was null or undefined when calling refreshToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/auth/{platform}/refresh`.replace(`{${"platform"}}`, encodeURIComponent(String(requestParameters['platform']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefreshTokenResponseFromJSON(jsonValue));
    }

    /**
     * Refresh an access token for a specific platform
     * Refresh token
     */
    async refreshToken(requestParameters: RefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefreshTokenResponse> {
        const response = await this.refreshTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refresh a user\'s profile data from the platform API
     * Refresh user profile
     */
    async refreshUserProfileRaw(requestParameters: RefreshUserProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefreshProfileResponse>> {
        if (requestParameters['platform'] == null) {
            throw new runtime.RequiredError(
                'platform',
                'Required parameter "platform" was null or undefined when calling refreshUserProfile().'
            );
        }

        if (requestParameters['refreshUserProfileRequest'] == null) {
            throw new runtime.RequiredError(
                'refreshUserProfileRequest',
                'Required parameter "refreshUserProfileRequest" was null or undefined when calling refreshUserProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/auth/{platform}/refresh-profile`.replace(`{${"platform"}}`, encodeURIComponent(String(requestParameters['platform']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshUserProfileRequestToJSON(requestParameters['refreshUserProfileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefreshProfileResponseFromJSON(jsonValue));
    }

    /**
     * Refresh a user\'s profile data from the platform API
     * Refresh user profile
     */
    async refreshUserProfile(requestParameters: RefreshUserProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefreshProfileResponse> {
        const response = await this.refreshUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke a user\'s tokens for a specific platform
     * Revoke token
     */
    async revokeTokenRaw(requestParameters: RevokeTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevokeTokenResponse>> {
        if (requestParameters['platform'] == null) {
            throw new runtime.RequiredError(
                'platform',
                'Required parameter "platform" was null or undefined when calling revokeToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/auth/{platform}/revoke`.replace(`{${"platform"}}`, encodeURIComponent(String(requestParameters['platform']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RevokeTokenResponseFromJSON(jsonValue));
    }

    /**
     * Revoke a user\'s tokens for a specific platform
     * Revoke token
     */
    async revokeToken(requestParameters: RevokeTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevokeTokenResponse> {
        const response = await this.revokeTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes the authorization for a NEAR account, preventing it from initiating new platform authentications. Requires signature validation via the Authorization header from the account being unauthorized.
     * Unauthorize NEAR Account
     */
    async unauthorizeNearRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnauthorizeNearResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // nearSignature authentication
        }

        const response = await this.request({
            path: `/api/auth/unauthorize/near`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnauthorizeNearResponseFromJSON(jsonValue));
    }

    /**
     * Removes the authorization for a NEAR account, preventing it from initiating new platform authentications. Requires signature validation via the Authorization header from the account being unauthorized.
     * Unauthorize NEAR Account
     */
    async unauthorizeNear(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnauthorizeNearResponse> {
        const response = await this.unauthorizeNearRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const HandleCallbackPlatformEnum = {
    Twitter: 'twitter'
} as const;
export type HandleCallbackPlatformEnum = typeof HandleCallbackPlatformEnum[keyof typeof HandleCallbackPlatformEnum];
/**
 * @export
 */
export const HasValidTokensPlatformEnum = {
    Twitter: 'twitter'
} as const;
export type HasValidTokensPlatformEnum = typeof HasValidTokensPlatformEnum[keyof typeof HasValidTokensPlatformEnum];
/**
 * @export
 */
export const InitializeAuthOperationPlatformEnum = {
    Twitter: 'twitter'
} as const;
export type InitializeAuthOperationPlatformEnum = typeof InitializeAuthOperationPlatformEnum[keyof typeof InitializeAuthOperationPlatformEnum];
/**
 * @export
 */
export const RefreshTokenPlatformEnum = {
    Twitter: 'twitter'
} as const;
export type RefreshTokenPlatformEnum = typeof RefreshTokenPlatformEnum[keyof typeof RefreshTokenPlatformEnum];
/**
 * @export
 */
export const RefreshUserProfileOperationPlatformEnum = {
    Twitter: 'twitter'
} as const;
export type RefreshUserProfileOperationPlatformEnum = typeof RefreshUserProfileOperationPlatformEnum[keyof typeof RefreshUserProfileOperationPlatformEnum];
/**
 * @export
 */
export const RevokeTokenPlatformEnum = {
    Twitter: 'twitter'
} as const;
export type RevokeTokenPlatformEnum = typeof RevokeTokenPlatformEnum[keyof typeof RevokeTokenPlatformEnum];
