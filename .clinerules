# Twitter API Proxy Project Rules

## Project Patterns

1. **TypeScript Usage**
   - Use TypeScript for all code files
   - Maintain strict type checking
   - Use interfaces for API request/response types
   - Leverage type guards for runtime type checking

2. **Code Organization**
   - Follow the defined directory structure in the architecture document
   - Group related functionality in dedicated modules
   - Use barrel exports (index.ts) for cleaner imports
   - Keep files focused on a single responsibility

3. **Error Handling**
   - Use factory functions for error creation (`createApiError`, `createPlatformError`)
   - Include context in error details object
   - Let base controller handle error response creation
   - Handle all promise rejections explicitly

4. **Security Practices**
   - Never log sensitive information (tokens, keys)
   - Always validate and sanitize input
   - Use encryption for sensitive data storage
   - Implement proper CORS restrictions

5. **Testing Approach**
   - Use Deno's native test runner (`Deno.test`)
   - Employ BDD style with `@std/testing/bdd` (describe/it)
   - Write unit tests for all services and utilities
   - Create integration tests for API endpoints and SDK
   - Use test steps (`t.step()`) for organizing complex tests
   - Mock external dependencies in tests
   - Leverage Deno's built-in sanitizers for resources, operations, and exits
   - Aim for high test coverage of critical paths

## Development Workflow

1. **Code Style**
   - Follow ESLint and Prettier configurations
   - Use meaningful variable and function names
   - Add JSDoc comments for public APIs
   - Keep functions small and focused

2. **Git Workflow**
   - Use feature branches for development
   - Write descriptive commit messages
   - Squash commits before merging
   - Keep PRs focused on single features/fixes

3. **Documentation**
   - Document all API endpoints
   - Keep code comments up to date
   - Update memory bank when making significant changes
   - Document environment variables and configuration

## API Response Guidelines

1. **Response Format**
   - All API responses MUST use `ApiResponse<T>` structure
   - All responses MUST include `meta` with `requestId` and `timestamp`
   - Success responses use `createSuccessResponse`
   - Error responses use `createErrorResponse`
   - Multi-status responses use HTTP 207
   - Metadata (pagination, rate limits) belongs in `meta`, not `data`
   - No redefining response schemas in specific endpoints

2. **Error Handling**
   - Use `createErrorDetail` and `createErrorResponse` for error responses
   - Include platform and userId in error details when relevant
   - Set HTTP status code based on error code mapping
   - Pass errors to base controller's handleError method
   - Support multi-error responses for bulk operations
   - Include debugging context in error details

## Implementation Guidelines

1. **Authentication Implementation**
   - Use PKCE flow for OAuth
   - Implement proper state validation
   - Store tokens with encryption
   - Refresh tokens proactively before expiration

2. **SDK Development Patterns**
   - Authentication Strategy
     - Use direct authentication with per-request signatures
     - Require NearAuthData for authenticated requests
     - Make authentication optional during client initialization
     - Throw authentication errors only when making requests that require auth
   - Error Handling
     - Use error type checking functions (isAuthError, isPlatformError, etc.)
     - Check error.recoverable for retry logic
     - Access platform/user context via error.details
     - Use apiWrapper for consistent error handling
     - Enrich errors with request context when needed
   - Testing Approach
     - Test direct authentication with signatures
     - Mock fetch responses for API testing
     - Test error handling utilities with various error types

3. **Rate Limiting Strategy**
   - Track rate limits from Twitter response headers
   - Implement client-side rate limiting
   - Use exponential backoff for retries
   - Queue requests when approaching limits

4. **Media Upload Handling**
   - Use chunked upload for large media
   - Implement proper error handling for uploads
   - Track upload status in D1
   - Support all required media types

5. **Performance Optimization**
   - Minimize KV operations
   - Use appropriate caching strategies
   - Optimize payload sizes
   - Monitor and optimize response times

## Deployment Rules

1. **Environment Management**
   - Maintain separate dev, staging, and prod environments
   - Use environment-specific variables
   - Test thoroughly in staging before production
   - Implement proper secrets management

2. **Monitoring Setup**
   - Set up structured logging
   - Configure appropriate alerts
   - Monitor rate limit usage
   - Track error rates and performance metrics

## User Preferences

1. **Code Editor Setup**
   - Use VSCode with recommended extensions
   - Configure auto-formatting on save
   - Use consistent indentation (2 spaces)
   - Enable TypeScript strict mode

2. **Development Tools**
   - Use Deno CLI for local development
   - Leverage Deno Deploy dashboard for monitoring
   - Use Deno's built-in test runner for testing
   - Use `@std/assert` and `@std/expect` for assertions
   - Implement GitHub Actions for CI/CD
